name: release
### Workflow for testing, building and releasing cert-manager-webhook-loopia ###
### Tests are executed using a test-fixure supplied that build up a complete Kubernetes control plane ###
### Deployment is made to DockerHub ###

# Run on push tag or manually.
on:
  workflow_dispatch:
  push:
    tags:
      - '*'
    branches:
      - main

jobs:
  # Run tests.
  test:
    runs-on: ubuntu-latest
    steps:
      # Echo...
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      # Download a specific version of the Go tool.
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.5

      # Check out code.
      - name: Check out code
        uses: actions/checkout@v2

      # Get Go dependencies.
      - name: Get dependencies
        run: go mod download

      # Download and unpack required test binaries.
      - name: Get test binaries
        run: sh ./testdata/scripts/fetch-test-binaries.sh

      # Add real credentials to loopia-credentials.yaml.
      - name: Apply credentials from secret
        env:
          LOOPIA_USERNAME: ${{ secrets.LOOPIA_USERNAME }}
          LOOPIA_PASSWORD: ${{ secrets.LOOPIA_PASSWORD }}
        run: |
          sed -i -e "s/\[LOOPIA USERNAME\]/$LOOPIA_USERNAME/" testdata/loopia/loopia-credentials.yaml
          sed -i -e "s/\[LOOPIA PASSWORD\]/$LOOPIA_PASSWORD/" testdata/loopia/loopia-credentials.yaml

      # Run conformance tests.
      - name: Run tests
        env:
          TEST_ZONE_NAME: ${{ secrets.LOOPIA_TEST_ZONE_NAME }}.
          TEST_STRICT_MODE: "false"
        run: go test -v

  # Build docker image and push to Docker Hub (depends on teststrict).
  release_docker:
    needs: test
    runs-on: ubuntu-latest
    steps:
      # Echo...
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      # Check out code, required to get latest tag.
      - name: Check out code
        uses: actions/checkout@v2

      # Get latest tag
      - name: 'Get previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 1.1 # Optional fallback tag to use when no tag can be found

      # Get GITHUB_REPOSITORY and lowercase it to GITHUB_REPOSITORY_LC env variable.
      - name: Set GITHUB_REPOSITORY_LC env
        run: echo "GITHUB_REPOSITORY_LC=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
      - name: Test GITHUB_REPOSITORY_LC env
        run: |
          echo $GITHUB_REPOSITORY_LC
          echo ${{ env.GITHUB_REPOSITORY_LC }}

      # Download a specific version of the Go tool.
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.5

      # Create and boot a Docker-BuildX-builder
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Log in to DockerHub.
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build using Dockerfile and push to DockerHub.
      - name: Build and push to DockerHub
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ env.GITHUB_REPOSITORY_LC }}:latest, ${{ env.GITHUB_REPOSITORY_LC }}:${{ steps.previoustag.outputs.tag }}

  # Build helm chart and push to GitHub Pages (depends on teststrict).
  release_helmchart:
    needs: test
    runs-on: ubuntu-latest
    steps:

    # Check out code.
    - name: Check out code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

    - name: Run chart-releaser
      uses: helm/chart-releaser-action@v1.0.0
      env:
        CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"